进程：每个进程都会有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含一个或多个线程；
线程：同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器（PC），线程切换开销小；
线程和进程一样分为五个阶段：创建、就绪、运行、阻塞和终止。
多进程是指操作系统能够同时运行多个任务（程序），多线程是指在同一个程序中有多个顺序流在执行。

在java中，要想实现多线程，有两种手段：一是集成Thread类，二是实现Runable接口；
调用线程对象的start()方法可以使线程变为可运行状态（Runnable)，线程具有了CPU执行权限，
但是线程什么时候获得CPU资源，真正执行是由操作系统决定的，通常thread.sleep()方法的调用目的就是不让当前线程独自霸占该进程所获取的CPU资源，
给其他线程留出执行的机会。

在java中，每次程序运行的时候至少启动2个线程，一个是main线程，一个是垃圾收集线程。因为每当使用java命令执行一个类的时候，
实际上都会启动一个JVM，每一个JVM实际就是在操作系统中启动了一个进程。


线程状态：
新建状态（New）：新创建了一个线程对象；
就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法，该状态的线程位于可运行线程池中，等待获得CPU的使用权；
运行状态（Running）：就绪状态的线程获得了CPU使用权，执行程序代码；
阻塞状态（Blocking）：阻塞状态是线程因为某种原因放弃了CPU使用权，暂时停止运行，直到线程进入就绪状态，才有机会转到运行状态。
  阻塞状态分为以下三种状况：
    1、等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中
    2、同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中
    3、其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态，
       当sleep()状态超时，join()等待线程终止或者超时，或者I/O处理完毕时，线程重新装入就绪状态。
死亡状态（Dead）：线程执行完了或者因为异常退出了run()方法，该线程结束生命周期。

